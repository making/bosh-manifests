filter {
  # https://github.com/cloudfoundry-community/logsearch-boshrelease/blob/develop/src/logsearch-config/src/logstash-filters/snippets/syslog_standard.conf

  grok {
    match => { "@message" => "(?:%{INT:syslog6587_msglen} )?<%{POSINT:syslog_pri}>(%{SPACE})?(?:%{NONNEGINT:syslog5424_ver} )?(?:%{SYSLOGTIMESTAMP:syslog_timestamp}|%{TIMESTAMP_ISO8601:syslog_timestamp}) %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?(:)? %{GREEDYDATA:syslog_message}" }
    add_tag => [ "syslog_standard" ]
    add_field => { "@raw" => "%{@message}"}
    tag_on_failure => ["fail/syslog_standard/_grokparsefailure"]
  }
  
  if !("fail/syslog_standard/_grokparsefailure" in [tags]) {
    syslog_pri { }
  
    date {
      match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss", "ISO8601" ]
      timezone => "UTC"
      remove_field => "syslog_timestamp"
    }
  
    mutate {
      convert => [ "syslog5424_ver", "integer" ]
      convert => [ "syslog6587_msglen", "integer" ]
    }
  
    if [syslog5424_ver] == 1 {
      grok {
        # I don't think this is rfc5424-legal because it says SD *must* exist and message *may* exist.
        # However, this makes parsing compatible with common syslog implementations.
        match => [ "syslog_message", "(?:%{DATA:syslog_procid}|\-) (?:%{DATA:syslog_msgid}|\-)(?: %{SYSLOG5424SD:syslog_sd}| \-)? %{GREEDYDATA:syslog_message}" ]
        overwrite => [
          "syslog_message"
        ]
        tag_on_failure => [ "fail/syslog_standard/_grokparsefailure-syslog_standard-5424" ]
      }
  
      # structured-data
      if [syslog_sd] {
        grok {
          match => [ "syslog_sd", "\[%{DATA:syslog_sd_id} (?<syslog_sd_params_raw>[^\]]+)\]" ]
          remove_field => [
            "syslog_sd"
          ]
          tag_on_failure => [ "fail/syslog_standard/_grokparsefailure-syslog_standard-5424/sds" ]
        }
  
        if !("fail/syslog_standard/_grokparsefailure-syslog_standard-5424/sd" in [tags]) {
          # convert the the key-value pairs
          kv {
            source => "syslog_sd_params_raw"
            target => "syslog_sd_params"
            remove_field => [
              "syslog_sd_params_raw"
            ]
          }

          if [syslog_sd_params][type] {
           # when the syslog params include a type, prepare the message for parsing by additional downstream parsing rules:
           #  - Change the @type - this triggers downstream parsing rules
           #  - @message_body = 'unparsed' message body that will be parsed by downstream @type rules
           mutate {
             replace => { "@type" => "%{syslog_sd_params[type]}" }
           }
          }
        }
      }
    }
    # @message should contain the remaining unparsed text
    mutate {
      rename => { "syslog_message" => "@message" }
    }

    grok {
      match => [ "@message",
                 "(?<timestamp>%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME})\s+%{LOGLEVEL:level} (\[%{DATA:application},%{DATA:traceId},%{DATA:spanId},%{DATA:exported}\])?\s*%{NUMBER:pid} --- \[\s*%{DATA:thread}\] %{DATA:logger}\s+:\s+%{GREEDYDATA:message}"
                ]
      add_tag => [ "spring_boot" ]
      tag_on_failure => ["fail/spring/_grokparsefailure"]
    }
    if !("fail/spring/_grokparsefailure" in [tags]) {
      ruby {
        code => 'event.set("message", event.get("message").gsub("@n@", "\n").gsub("u0009", "\t"))'
      }
      ruby {
        code => 'event.set("@message", event.get("message"))'
      }
      if [logger] == "RTR" {
        grok {
          match => [ "@message",
                     "date:%{DATA}	method:%{DATA:method}	path:%{DATA:path}	status:%{INT:status}	host:%{DATA:host}	address:%{IP:address}	elapsed:%{INT:elapsed}ms	crawler:%{DATA:crawler}	user-agent:%{DATA:useragent}	referer:%{DATA:referer}	"
                    ]
          tag_on_failure => ["fail/RTR/_grokparsefailure"]
        }    
      }
    }
  }
}
